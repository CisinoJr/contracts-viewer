{"version":3,"sources":["components/ContractItem/index.js","services/contracts.service.js","App.js","serviceWorker.js","index.js"],"names":["ContractItem","contract","useState","detailUrl","setDetailUrl","useEffect","createUrl","urlBase","uasg","cnpj_contratada","numero","className","identificador","numero_processo","objeto","data_inicio_vigencia","data_termino_vigencia","target","href","api","axios","create","baseURL","ContractsService","get","response","data","App","contractsService","contracts","setContracts","a","getAll","loadContracts","id","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVA4DeA,MAvDf,YAAqC,IAAbC,EAAY,EAAZA,SAAY,EAEAC,mBAAS,IAFT,mBAE3BC,EAF2B,KAEhBC,EAFgB,KAIlCC,qBAAU,WAEND,EAAaE,OAId,IAEH,IAAMA,EAAY,WAChB,IAAIC,EAAO,uEAAmEN,EAASO,MAUvF,OARIP,EAASQ,kBACXF,GAAO,2BAAwBN,EAASQ,kBAGtCR,EAASS,SACXH,GAAO,kBAAeN,EAASS,SAG1BH,GAGT,OACE,wBAAII,UAAU,iBACZ,gCACE,yBAAKA,UAAU,iBAAf,kBACkBV,EAASW,eAG3B,yBAAKD,UAAU,iBAAf,0BACuBV,EAASY,kBAKlC,2BACGZ,EAASa,QAGZ,yBAAKH,UAAU,iBACb,6DAA6BV,EAASc,uBAExC,yBAAKJ,UAAU,iBACb,8DAA8BV,EAASe,wBAGzC,uBAAGC,OAAQ,SAAUC,KAAMf,GAA3B,c,wBCrDAgB,E,OAAMC,EAAMC,OAAO,CACvBC,QAAQ,gDAGWC,E,iOAGMJ,EAAIK,IAAI,a,cAAzBC,E,yBAECA,EAASC,M,oHCoCLC,MApCf,WACE,IAAMC,EAAmB,IAAIL,EADhB,EAEqBrB,mBAAS,IAF9B,mBAEN2B,EAFM,KAEKC,EAFL,KAab,OATAzB,qBAAU,WAAM,4CACd,4BAAA0B,EAAA,sEACyBH,EAAiBI,SAD1C,OACQP,EADR,OAEEK,EAAaL,GAFf,4CADc,uBAAC,WAAD,wBAMdQ,KACC,IAGD,6BACE,gCACE,yBAAKtB,UAAU,UACb,uBAAGA,UAAU,eAAeO,KAAM,KAChC,6DAIN,yBAAKgB,GAAG,OACN,8BACE,4BACGL,EAAUM,KAAI,SAAAlC,GAAQ,OACrB,kBAAC,EAAD,CAAcmC,IAAKnC,EAASW,cAAeX,SAAUA,YCzB/CoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.285150c3.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable react/jsx-no-target-blank */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './contractItem.css';\r\n\r\nfunction ContractItem({ contract }) {\r\n\r\n  const [detailUrl, setDetailUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    function createDetailUrl() {\r\n      setDetailUrl(createUrl());\r\n    }\r\n\r\n    createDetailUrl();\r\n  }, []);\r\n\r\n  const createUrl = () => {\r\n    let urlBase = `http://compras.dados.gov.br/contratos/v1/contratos.html?uasg=${contract.uasg}`;\r\n\r\n    if (contract.cnpj_contratada) {\r\n      urlBase += `&cnpj_contratada=${contract.cnpj_contratada}`;\r\n    }\r\n\r\n    if (contract.numero) {\r\n      urlBase += `&numero=${contract.numero}`\r\n    }\r\n\r\n    return urlBase;\r\n  }\r\n\r\n  return (\r\n    <li className=\"contract-item\">\r\n      <header>\r\n        <div className=\"contract-info\">\r\n          Identificador: {contract.identificador}\r\n        </div>\r\n\r\n        <div className=\"contract-info\">\r\n          Número do processo: {contract.numero_processo}\r\n        </div>\r\n      </header>\r\n\r\n\r\n      <p>\r\n        {contract.objeto}\r\n      </p>\r\n\r\n      <div className=\"contract-info\">\r\n        <span>Data Início Vigência: {contract.data_inicio_vigencia}</span>\r\n      </div>\r\n      <div className=\"contract-info\">\r\n        <span>Data Término Vigência: {contract.data_termino_vigencia}</span>\r\n      </div>\r\n\r\n      <a target={\"_blank\"} href={detailUrl}>Detalhes</a>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ContractItem;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: `https://cisinojr.github.io/contracts-viewer`,\r\n});\r\n\r\nexport default class ContractsService {\r\n\r\n  async getAll() {\r\n    const response = await api.get('data.json');\r\n\r\n    return response.data;\r\n  }\r\n\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ContractItem from './components/ContractItem';\r\nimport ContractsService from './services/contracts.service';\r\n\r\nimport './global.css';\r\nimport './App.css';\r\nimport './Main.css';\r\n\r\nfunction App() {\r\n  const contractsService = new ContractsService();\r\n  const [contracts, setContracts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function loadContracts() {\r\n      const response = await contractsService.getAll();\r\n      setContracts(response);\r\n    }\r\n\r\n    loadContracts();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <nav className=\"navbar\">\r\n          <a className=\"navbar-title\" href={'#'}>\r\n            <h1>Visualizador de Contratos </h1>\r\n          </a>\r\n        </nav>\r\n      </header>\r\n      <div id=\"app\">\r\n        <main>\r\n          <ul>\r\n            {contracts.map(contract => (\r\n              <ContractItem key={contract.identificador} contract={contract} />\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}